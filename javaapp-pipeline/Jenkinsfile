pipeline {
    agent {label 'docker'}


environment {
        DOCKER_IMAGE_NAME = "pranayme/jenkins_test"
        DOCKER_HUB_CREDENTIALS = "Docker_user"   // DockerHub creds ID in Jenkins
        IMAGE_TAG = "latest" // Or use a dynamic tag like "${env.BUILD_NUMBER}"
        AWS_DEFAULT_REGION = "ap-south-1"   // Change to your region
        AWS_ACCOUNT_ID     = "995757496665" // Your AWS Account ID
        REPO_NAME          = "jenkins-test" // Your ECR repo name
       // SNYK_TOKEN = credentials('snyk-api-token')
    }
    
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/pranay-meka/jenkins_docker.git'
            }
        }

      
        stage('Build') {
            steps {
                dir('javaapp-pipeline') {
                    
                    // docker build -t ${DOCKER_IMAGE_NAME}:${IMAGE_TAG} .
                    sh 'docker build -t jenkins-test .'
                    sh 'docker tag jenkins-test:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$REPO_NAME:$IMAGE_TAG'
                    // trivy image --scanners vuln --exit-code 1 --severity HIGH,CRITICAL ${DOCKER_IMAGE_NAME}:${IMAGE_TAG}                    
                }
            }
        }

        stage('SonarQube') {
            steps {
                dir('javaapp-pipeline') {
                withSonarQubeEnv('sonar') {
                    sh '''
                          -Dsonar.projectKey=jenkins_docker-test \
                          -Dsonar.projectName=jenkins_docker-test \
                          -Dsonar.inclusions=Dockerfile \
                          
                    '''
                    //-Dsonar.login=$Sonar_token
                }
                }
            }
        }
        
        stage('SNYK Scan') {
            steps {
                dir('javaapp-pipeline') {
                    script{
                        snykSecurity severity: 'critical', snykInstallation: 'snyk-i', snykTokenId: 'snyk-api-token'
                        } 
                    }

                }
                
            }

        stage('Publish') {
            steps {
               script {
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_HUB_CREDENTIALS, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    //sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    //sh "docker push ${DOCKER_IMAGE_NAME}:${IMAGE_TAG}"
                    //sh "docker logout"
                    sh 'docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/${REPO_NAME}:${IMAGE_TAG}'
                    }
                }
                    }
                }

        stage('Pull and Deploy') {
            steps {
                  sh 'docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/${REPO_NAME}:${IMAGE_TAG}'
         //       sh 'docker pull ${DOCKER_IMAGE_NAME}:${IMAGE_TAG}'
                  sh 'docker run -itd -p 5000:5000 ${REPO_NAME}:${IMAGE_TAG}'
                }
            }
       // }
    }
    post {
      always {
        cleanWs()
      }
        }
    }
